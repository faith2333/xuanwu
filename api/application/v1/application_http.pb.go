// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: application/v1/application.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApplicationSvcCreateApplication = "/api.application.v1.ApplicationSvc/CreateApplication"
const OperationApplicationSvcDeleteApplication = "/api.application.v1.ApplicationSvc/DeleteApplication"
const OperationApplicationSvcGetApplication = "/api.application.v1.ApplicationSvc/GetApplication"
const OperationApplicationSvcListApplications = "/api.application.v1.ApplicationSvc/ListApplications"

type ApplicationSvcHTTPServer interface {
	CreateApplication(context.Context, *CreateAppRequest) (*Application, error)
	DeleteApplication(context.Context, *DeleteAppRequest) (*EmptyResponse, error)
	GetApplication(context.Context, *GetAppRequest) (*Application, error)
	ListApplications(context.Context, *ListAppRequest) (*ListAppResponse, error)
}

func RegisterApplicationSvcHTTPServer(s *http.Server, srv ApplicationSvcHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/application/app", _ApplicationSvc_CreateApplication0_HTTP_Handler(srv))
	r.GET("/v1/application/app", _ApplicationSvc_ListApplications0_HTTP_Handler(srv))
	r.GET("/v1/application/app/{code}", _ApplicationSvc_GetApplication0_HTTP_Handler(srv))
	r.DELETE("/v1/application/app/delete/{code}", _ApplicationSvc_DeleteApplication0_HTTP_Handler(srv))
}

func _ApplicationSvc_CreateApplication0_HTTP_Handler(srv ApplicationSvcHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationSvcCreateApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApplication(ctx, req.(*CreateAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Application)
		return ctx.Result(200, reply)
	}
}

func _ApplicationSvc_ListApplications0_HTTP_Handler(srv ApplicationSvcHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationSvcListApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApplications(ctx, req.(*ListAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAppResponse)
		return ctx.Result(200, reply)
	}
}

func _ApplicationSvc_GetApplication0_HTTP_Handler(srv ApplicationSvcHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationSvcGetApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApplication(ctx, req.(*GetAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Application)
		return ctx.Result(200, reply)
	}
}

func _ApplicationSvc_DeleteApplication0_HTTP_Handler(srv ApplicationSvcHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationSvcDeleteApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApplication(ctx, req.(*DeleteAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmptyResponse)
		return ctx.Result(200, reply)
	}
}

type ApplicationSvcHTTPClient interface {
	CreateApplication(ctx context.Context, req *CreateAppRequest, opts ...http.CallOption) (rsp *Application, err error)
	DeleteApplication(ctx context.Context, req *DeleteAppRequest, opts ...http.CallOption) (rsp *EmptyResponse, err error)
	GetApplication(ctx context.Context, req *GetAppRequest, opts ...http.CallOption) (rsp *Application, err error)
	ListApplications(ctx context.Context, req *ListAppRequest, opts ...http.CallOption) (rsp *ListAppResponse, err error)
}

type ApplicationSvcHTTPClientImpl struct {
	cc *http.Client
}

func NewApplicationSvcHTTPClient(client *http.Client) ApplicationSvcHTTPClient {
	return &ApplicationSvcHTTPClientImpl{client}
}

func (c *ApplicationSvcHTTPClientImpl) CreateApplication(ctx context.Context, in *CreateAppRequest, opts ...http.CallOption) (*Application, error) {
	var out Application
	pattern := "/v1/application/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationSvcCreateApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationSvcHTTPClientImpl) DeleteApplication(ctx context.Context, in *DeleteAppRequest, opts ...http.CallOption) (*EmptyResponse, error) {
	var out EmptyResponse
	pattern := "/v1/application/app/delete/{code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApplicationSvcDeleteApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationSvcHTTPClientImpl) GetApplication(ctx context.Context, in *GetAppRequest, opts ...http.CallOption) (*Application, error) {
	var out Application
	pattern := "/v1/application/app/{code}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApplicationSvcGetApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApplicationSvcHTTPClientImpl) ListApplications(ctx context.Context, in *ListAppRequest, opts ...http.CallOption) (*ListAppResponse, error) {
	var out ListAppResponse
	pattern := "/v1/application/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApplicationSvcListApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
