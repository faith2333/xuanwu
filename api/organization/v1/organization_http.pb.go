// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: organization/v1/organization.proto

package v1

import (
	context "context"
	v1 "github.com/faith2333/xuanwu/api/user/v1"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrganizationServiceCreateOrganization = "/api.organization.v1.OrganizationService/CreateOrganization"
const OperationOrganizationServiceCreateRole = "/api.organization.v1.OrganizationService/CreateRole"
const OperationOrganizationServiceCreateUsers = "/api.organization.v1.OrganizationService/CreateUsers"
const OperationOrganizationServiceListOrganizations = "/api.organization.v1.OrganizationService/ListOrganizations"
const OperationOrganizationServiceListRoles = "/api.organization.v1.OrganizationService/ListRoles"
const OperationOrganizationServiceListUsers = "/api.organization.v1.OrganizationService/ListUsers"
const OperationOrganizationServiceUpdateOrganization = "/api.organization.v1.OrganizationService/UpdateOrganization"

type OrganizationServiceHTTPServer interface {
	CreateOrganization(context.Context, *CreateOrgRequest) (*Organization, error)
	CreateRole(context.Context, *CreateRoleRequest) (*Role, error)
	CreateUsers(context.Context, *CreateUserRequest) (*v1.User, error)
	// ListOrganizations organization operation
	ListOrganizations(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	// ListRoles role operation
	ListRoles(context.Context, *ListRoleRequest) (*ListRolesResponse, error)
	// ListUsers users operation
	ListUsers(context.Context, *ListUserRequest) (*ListUsersResponse, error)
	UpdateOrganization(context.Context, *CreateOrgRequest) (*Organization, error)
}

func RegisterOrganizationServiceHTTPServer(s *http.Server, srv OrganizationServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/organization/users", _OrganizationService_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/organization/users", _OrganizationService_CreateUsers0_HTTP_Handler(srv))
	r.GET("/v1/organization/roles", _OrganizationService_ListRoles0_HTTP_Handler(srv))
	r.POST("/v1/organization/roles", _OrganizationService_CreateRole0_HTTP_Handler(srv))
	r.GET("/v1/organization/orgs", _OrganizationService_ListOrganizations0_HTTP_Handler(srv))
	r.POST("/v1/organization/orgs", _OrganizationService_CreateOrganization0_HTTP_Handler(srv))
	r.PUT("/v1/organization/orgs", _OrganizationService_UpdateOrganization0_HTTP_Handler(srv))
}

func _OrganizationService_ListUsers0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_CreateUsers0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceCreateUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUsers(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.User)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_ListRoles0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceListRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_CreateRole0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_ListOrganizations0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrgsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceListOrganizations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrganizations(ctx, req.(*ListOrgsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrgsResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_CreateOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceCreateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrganization(ctx, req.(*CreateOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Organization)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_UpdateOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceUpdateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrganization(ctx, req.(*CreateOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Organization)
		return ctx.Result(200, reply)
	}
}

type OrganizationServiceHTTPClient interface {
	CreateOrganization(ctx context.Context, req *CreateOrgRequest, opts ...http.CallOption) (rsp *Organization, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *Role, err error)
	CreateUsers(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *v1.User, err error)
	ListOrganizations(ctx context.Context, req *ListOrgsRequest, opts ...http.CallOption) (rsp *ListOrgsResponse, err error)
	ListRoles(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRolesResponse, err error)
	ListUsers(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
	UpdateOrganization(ctx context.Context, req *CreateOrgRequest, opts ...http.CallOption) (rsp *Organization, err error)
}

type OrganizationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrganizationServiceHTTPClient(client *http.Client) OrganizationServiceHTTPClient {
	return &OrganizationServiceHTTPClientImpl{client}
}

func (c *OrganizationServiceHTTPClientImpl) CreateOrganization(ctx context.Context, in *CreateOrgRequest, opts ...http.CallOption) (*Organization, error) {
	var out Organization
	pattern := "/v1/organization/orgs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceCreateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/v1/organization/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) CreateUsers(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*v1.User, error) {
	var out v1.User
	pattern := "/v1/organization/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceCreateUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) ListOrganizations(ctx context.Context, in *ListOrgsRequest, opts ...http.CallOption) (*ListOrgsResponse, error) {
	var out ListOrgsResponse
	pattern := "/v1/organization/orgs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceListOrganizations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) ListRoles(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRolesResponse, error) {
	var out ListRolesResponse
	pattern := "/v1/organization/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) ListUsers(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/organization/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrganizationServiceHTTPClientImpl) UpdateOrganization(ctx context.Context, in *CreateOrgRequest, opts ...http.CallOption) (*Organization, error) {
	var out Organization
	pattern := "/v1/organization/orgs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceUpdateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
